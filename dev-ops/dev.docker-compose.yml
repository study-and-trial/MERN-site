services:
  dev-db:
    container_name: dev-db
    build:
      context: ../DB/
      dockerfile: dev.Dockerfile
    # command: 공식 이미지를 사용하는데, 이미지에 명세이 이미 있다.
    restart: unless-stopped
    env_file:
      - ./env/.dev.DB.env
    expose:
      - 3306
    volumes:
      # 데이터베이스는 보존되어야 개발이 편하다.
      - db-data:/var/lib/mysql
    # develop:
    #   watch:
    #     - action: rebuild
    #       path: ../DB/

  dev-be:
    depends_on:
      - dev-db
    container_name: dev-be
    build:
      context: ../BE/
      dockerfile: dev.Dockerfile
    command: npm run dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
    env_file:
      - ./env/.dev.BE.env
    ports:
      - 4000:4000
    expose:
      - 4000
    volumes:
      - ../BE/:/app/
    # https://docs.docker.com/compose/file-watch/
    # develop:
    #   watch:
    #     - action: sync
    #       path: ../BE/
    #       target: /app/
    #       ignore:
    #         - ../BE/node_modules

  dev-fe:
    depends_on:
      - dev-be
    container_name: dev-fe
    build:
      context: ../FE/
      dockerfile: dev.Dockerfile
    command: npm run dev
    restart: unless-stopped
    env_file:
      - ./env/.dev.FE.env
    expose:
      - 3000
    volumes:
      - ../FE/:/app/
    # develop:
    #   watch:
    #     - action: sync
    #       path: ../FE/
    #       target: /app/
    #       ignore:
    #         - ../FE/node_modules

  dev-nginx:
    depends_on:
      - dev-fe
    container_name: dev-nginx
    image: nginx:1.25.5-alpine
    restart: unless-stopped
    ports:
      - 100:80
      # - 443:443 어차피 개발용 서버
    volumes:
      - ../nginx/conf.dev.d/:/etc/nginx/conf.d/

volumes:
  db-data:
